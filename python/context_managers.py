"""
Контекстные менеджеры являются удобным инструментом для работы с ресурсами, такими как файлы,
сетевые соединения или блокировки, которые требуют корректного открытия и закрытия.
В Python контекстные менеджеры используются совместно с инструкцией with.
В этой статье мы рассмотрим, как создавать и использовать контекстные менеджеры.
"""

"""
Python предоставляет несколько встроенных контекстных менеджеров для работы с файлами, сокетами и другими ресурсами. Например, для работы с файлами используется следующий синтаксис:

with open("file.txt", "r") as file:
    content = file.read()

После выполнения этого кода, файл будет автоматически закрыт, и нет необходимости вызывать file.close().
"""

"""
Для создания собственного контекстного менеджера,
нужно определить класс с методами __enter__() и __exit__():
"""

class MyContextManager:
    def __enter__(self):
        print("Entering the context")
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        print("Exiting the context")

with MyContextManager() as cm:
    print("Inside the context")

"""
Метод __enter__() вызывается при входе в контекст, и может возвращать объект,
который будет использоваться внутри блока with.
Метод __exit__() вызывается при выходе из контекста и принимает параметры, связанные с исключениями, если они возникли.
"""
