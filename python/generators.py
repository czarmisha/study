"""
Генераторы — это одна из мощных и удобных возможностей Python, которые позволяют легко создавать итераторы для обработки больших объемов данных.

Генератор — это специальная функция, которая возвращает итератор, с помощью которого можно обойти некоторую последовательность значений.
Отличительной особенностью генераторов является использование ключевого слова yield вместо return для возврата значений.
Когда функция-генератор вызывается, она не выполняет свое тело сразу, а возвращает объект-генератор,
итерация по которому будет выполнять тело функции и возвращать значения по мере их генерации.
"""

def simple_generator(n):
    i = 0
    while i < n:
        yield i
        i += 1


gen = simple_generator(5)
print(type(gen))

for i in gen:
    print(i)



"""
Использование генераторов

Генераторы полезны в тех случаях, когда вам нужно обрабатывать большие объемы данных, и вы не хотите загружать их все в память сразу.
Например, вы можете использовать генератор для чтения большого файла построчно, не загружая его целиком в память:

def read_large_file(file_path):
    with open(file_path, "r") as file:
        for line in file:
            yield line.strip()
 
for line in read_large_file("large_file.txt"):
    print(line)

"""


"""
Генераторные выражения

Кроме определения функций-генераторов, в Python существует еще один способ создания генераторов — генераторные выражения.
Они напоминают списковые включения, но используют круглые скобки вместо квадратных и создают объект-генератор, а не список.
Вот пример генераторного выражения, которое возвращает квадраты чисел от 0 до n:
"""

n = 5
squares_generator = (i * i for i in range(n + 1))
print(type(squares_generator))

for square in squares_generator:
    print(square)
